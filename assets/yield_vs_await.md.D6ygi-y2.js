import{_ as s,c as a,o as t,ae as n}from"./chunks/framework.D4C6EifA.js";const g=JSON.parse('{"title":"Yield* vs Await: Technical Differences","description":"","frontmatter":{},"headers":[],"relativePath":"yield_vs_await.md","filePath":"yield_vs_await.md"}'),e={name:"yield_vs_await.md"};function l(h,i,r,k,p,d){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="yield-vs-await-technical-differences" tabindex="-1">Yield* vs Await: Technical Differences <a class="header-anchor" href="#yield-vs-await-technical-differences" aria-label="Permalink to &quot;Yield* vs Await: Technical Differences&quot;">​</a></h1><h2 id="javascript-typescript-effect-gen-with-yield" tabindex="-1">JavaScript/TypeScript: Effect.gen with yield* <a class="header-anchor" href="#javascript-typescript-effect-gen-with-yield" aria-label="Permalink to &quot;JavaScript/TypeScript: Effect.gen with yield*&quot;">​</a></h2><p>In Effect-TS, <code>Effect.gen</code> uses JavaScript generators:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Effect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tenYearsMillis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastRandom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lastRandom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tenYearsMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lastRandom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> yield*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextIntBetween</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tenYearsMillis) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ← yield*</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastRandom</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="how-yield-works" tabindex="-1">How yield* works: <a class="header-anchor" href="#how-yield-works" aria-label="Permalink to &quot;How yield* works:&quot;">​</a></h3><ol><li><strong>Generator Functions</strong>: <code>function*</code> creates a generator that can pause/resume</li><li><strong>yield</strong>*: Delegates to another generator/iterable and unwraps the value</li><li><strong>Lazy Evaluation</strong>: The generator doesn&#39;t execute until consumed</li><li><strong>Control Flow</strong>: Effect.gen interprets each <code>yield*</code> as an Effect operation</li><li><strong>Error Handling</strong>: Failures are propagated through the generator protocol</li></ol><h3 id="benefits" tabindex="-1">Benefits: <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits:&quot;">​</a></h3><ul><li><strong>Pure functional</strong>: No side effects during construction</li><li><strong>Composable</strong>: Effects can be combined without execution</li><li><strong>Error propagation</strong>: Automatic through generator protocol</li><li><strong>Type safety</strong>: TypeScript can infer types through yield*</li></ul><h2 id="dart-effect-gen-with-await" tabindex="-1">Dart: Effect.gen with await <a class="header-anchor" href="#dart-effect-gen-with-await" aria-label="Permalink to &quot;Dart: Effect.gen with await&quot;">​</a></h2><p>In our Dart implementation:</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Effect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tenYearsMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastRandom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lastRandom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tenYearsMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lastRandom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextIntBetween</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tenYearsMillis)(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ← await + call()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastRandom;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="how-await-works" tabindex="-1">How await works: <a class="header-anchor" href="#how-await-works" aria-label="Permalink to &quot;How await works:&quot;">​</a></h3><ol><li><strong>Async Functions</strong>: <code>async</code> functions return <code>Future&lt;T&gt;</code></li><li><strong>await</strong>: Suspends execution until Future completes, unwraps value</li><li><strong>Eager Evaluation</strong>: The async function starts executing immediately</li><li><strong>Control Flow</strong>: Standard Dart async/await semantics</li><li><strong>Error Handling</strong>: Exceptions thrown normally</li></ol><h3 id="benefits-1" tabindex="-1">Benefits: <a class="header-anchor" href="#benefits-1" aria-label="Permalink to &quot;Benefits:&quot;">​</a></h3><ul><li><strong>Familiar</strong>: Standard Dart async patterns</li><li><strong>Debuggable</strong>: Standard debugger support</li><li><strong>Interoperable</strong>: Works with existing Dart async code</li><li><strong>Performance</strong>: No generator overhead</li></ul><h2 id="key-technical-differences" tabindex="-1">Key Technical Differences <a class="header-anchor" href="#key-technical-differences" aria-label="Permalink to &quot;Key Technical Differences&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Aspect</th><th>JavaScript yield*</th><th>Dart await</th></tr></thead><tbody><tr><td><strong>Execution</strong></td><td>Lazy (when consumed)</td><td>Eager (starts immediately)</td></tr><tr><td><strong>Purity</strong></td><td>Pure (no side effects)</td><td>Impure (executes effects)</td></tr><tr><td><strong>Error Handling</strong></td><td>Generator protocol</td><td>Exception throwing</td></tr><tr><td><strong>Composability</strong></td><td>High (pure functions)</td><td>Lower (side effects)</td></tr><tr><td><strong>Type Inference</strong></td><td>Excellent</td><td>Good (with our extension)</td></tr><tr><td><strong>Debugging</strong></td><td>Generator debugging</td><td>Standard async debugging</td></tr></tbody></table><h2 id="why-we-use-await" tabindex="-1">Why We Use await <a class="header-anchor" href="#why-we-use-await" aria-label="Permalink to &quot;Why We Use await&quot;">​</a></h2><ol><li><strong>Dart Limitations</strong>: Dart doesn&#39;t have generator delegation like JS</li><li><strong>Idiomatic</strong>: async/await is the standard Dart pattern</li><li><strong>Simplicity</strong>: Easier to understand for Dart developers</li><li><strong>Tooling</strong>: Better IDE and debugger support</li></ol><h2 id="could-we-implement-yield-in-dart" tabindex="-1">Could We Implement yield* in Dart? <a class="header-anchor" href="#could-we-implement-yield-in-dart" aria-label="Permalink to &quot;Could We Implement yield* in Dart?&quot;">​</a></h2><p>Yes, but it would be complex:</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hypothetical Dart generator syntax</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Effect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sync*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tenYearsMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 365</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastRandom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lastRandom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tenYearsMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lastRandom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> yield</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextIntBetween</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tenYearsMillis);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastRandom; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ← This doesn&#39;t work in Dart generators</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="challenges" tabindex="-1">Challenges: <a class="header-anchor" href="#challenges" aria-label="Permalink to &quot;Challenges:&quot;">​</a></h3><ol><li><strong>No yield delegation</strong>: Dart&#39;s <code>yield*</code> doesn&#39;t work like JS</li><li><strong>No return values</strong>: Dart generators can&#39;t return values</li><li><strong>Complex interpreter</strong>: Would need custom Effect interpreter</li><li><strong>Type complexity</strong>: More complex type inference</li></ol><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>While JavaScript&#39;s <code>yield*</code> provides purer functional semantics, Dart&#39;s <code>await</code> approach is:</p><ul><li>More idiomatic to Dart</li><li>Easier to debug and understand</li><li>Simpler to implement</li><li>Better supported by tooling</li></ul><p>Our <code>Effect.gen</code> with await provides 90% of the benefits with much better Dart integration.</p>`,28)]))}const c=s(e,[["render",l]]);export{g as __pageData,c as default};
